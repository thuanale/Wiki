1. Terminology:
- Images: The file system and configuration of our application which are used
  to create containers. 
- Containers: Running instances of Docker images - containers run the actual
  applications. A container includes an application and all of its dependencies.
  It shares the kernel with other containers, and runs as an isolated process
  in user space on the host OS. You created a container using docker run which
  you did using the alpine image that you downloaded.
- Docker daemon: The background service running on the host that manages
  building, running and distributing Docker containers.
- Docker client: The command line tool that allows the user to interact with
  the Docker daemon.
- Docker Hub: Store is, among other things, a registry of Docker images. You
  can think of the registry as a directory of all available Docker images.
- Layers: A Docker image is built up from a series of layers. Each layer
  represents an instruction in the imageâ€™s Dockerfile. Each layer except the
  last one is read-only.
- Dockerfile: A text file that contains all the commands, in order, needed to
  build a given image. The Dockerfile reference page lists the various commands
  and format details for Dockerfiles.
- Volumes: A special Docker container layer that allows data to persist and be
  shared separately from the container itself. Think of volumes as a way to
  abstract and manage your persistent data separately from the application
  itself.
- Compose is used to control multiple containers on a single system. Much like
  the Dockerfile we looked at to build an image, there is a text file that
  describes the application: which images to use, how many instances, the
  network connections, etc.
- Swarm Mode tells Docker that you will be running many Docker engines and you
  want to coordinate operations across all of them. Swarm mode combines the
  ability to not only define the application architecture, like Compose, but to
  define and maintain high availability levels, scaling, load balancing, and
  more. With all this functionality, Swarm mode is used more often in production
  environments than its more simplistic cousin, Compose.

2. Commands:
# Pull images
 docker pull <images> 

# Run container:
 docker container run <images>

# Start container:
 docker container start <container-id>

# List container:
 docker container ls 

# List all containers (running + exitted)
 docker container ls -a

# List all images
 docker image ls

# Exec command
 docker container exec <container-id> <command>

# Interact with container
 docker container run -it <container-id> <terminal>

# Build image from current container
 docker container commit <container-id>
 docker image tag <image-id> <image-custom-name>

#
 

