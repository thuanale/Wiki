0. Contents
C1 Infrastructure
C2 IAM
--------------------------------------------------------------------------------
[Infrastructure]
- AWS Regions: 
  - Cluster of data centers
  - Most AWS services are regional-scope
  - To choose an AWS region: "CLAP"
	- "Compliance" with data governance & legal requirements.
	- "Latency": Proximity to the customers (reduced latency)
	- "Avaliable" services within a Region
	- "Pricing"
	  
- AWS Availablility zone:
  - It's one or many discrete data centers with redudant power, networking and 
    connectivity.
  - A region has many availablitiy zones.
  - Availabiltiy zones within a region are separated from each other.
  
- AWS Edge Locations:
  - Also called AWS Point of Presence (POP).
  - Content is delivered to end users with lower latency.
 
- Reference:
  - Regional services: 
  https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/
  
--------------------------------------------------------------------------------
[IAM]
- IAM: Users & Groups
  - IAM: Identity and Access Managment.
  - Global service.
  - Root account created by default, shouldn’t be used or shared.
  - Users are people within your organization, and can be grouped.
  - Groups only contain users, not other groups.
  - Users don’t have to belong to a group (inline), and user can belong to 
    multiple groups.
  
- IAM: Permissions
  - Users or Groups: can be assigned JSON documents called policies.
  - These policies difine the permisions of the users.
  - In AWS, apply the "least privilege principle".
  
- IAM: Policies Structure:
  - Consists of:
    - Version: policy language version.
	- Id: an indentifier for the policy (optional).
	- Statement: one or more individual statements (required).
  - Statements consist of:
    - Sid: an identifier for the statement (optional).
	- Effect: whether the statement allows or denies access (Allow, Deny).
	- Principal: account/user/role to which this policy applied to.
	- Action: list of actions this policy allows or denies.
	- Resource: list of resources to which the actions applied to.
	- Condition: conditions for when this policy is in effect(optional).
	
- IAM: Password Policy:
  - Strong passwords
  - In AWS, password policy can be:
    - set a minimum password length
	- Require specific character types.
	- Allow user to change their own passwords
	- Require users to change their password after sometime.
	- Prevent password re-use

- MFA:
  - Multi Factor Athentication.
  - MFA = password you know + security device you own

- Access AWS:
  - To access AWS, you have three options:
    - AWS Management Console (protected by password + MFA)
	- AWS Command Line Interface (CLI): protected by access keys
	- AWS Software Developer Kit (SDK) - for code: protected by access keys
	- Access Keys are generated through the AWS Console
	- Users manage their own access keys
	- Access Key ID = username
	- Secret Access Key = password

- AWS CLI
  - A tool that enables you to interact with AWS services using commands in
    your command-line shell.
  - Alternative to using AWS Management Console.

- AWS SDK:
  - AWS Software Development Kit (AWS SDK).
  - Language-specific APIs (set of libraries).
  - Enables you to access and manage AWS services programmatically.
  - Embedded within your application.

- IAM Roles for Services:
  - Some AWS service will need to perform actions on your behalf.
  - To do so, we will assign permissions to AWS services with IAM Roles.
  - Common roles:
	- EC2 Instance Roles
	- Lambda Function Roles
	- Roles for CloudFormation
	
- IAM Security Tools:
  - IAM Credential Reports (account-level):
	- A report that lists all your account's users and the status of their 
	  various credentials
  - IAM Access Advisor (user-level):
    - Access advisor shows the service permissions granted to a user and
   	  when those services were last accessed.
	- You can use this information to revise your policies.
	
- Best practices:
  - Don’t use the root account except for AWS account setup
  - One physical user = One AWS user
  - Assign users to groups and assign permissions to groups
  - Create a strong password policy
  - Use and enforce the use of Multi Factor Authentication (MFA)
  - Create and use Roles for giving permissions to AWS services
  - Use Access Keys for Programmatic Access (CLI / SDK)
  - Audit permissions of your account with the IAM Credentials Report
  - Never share IAM users & Access Keys
	
--------------------------------------------------------------------------------
