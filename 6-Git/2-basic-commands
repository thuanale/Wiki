1. Setup:  
- Minimum:
  git config --global user.name "<your username>"
  git config --global user.email "<your email>"
- Verify:
  git config --list
- Another config may be saved in:
  /etc/gitconfig
  ~/.gitconfig
2. Start a git repository:
- Initialize (make) a local directory as git repository
  git init
- Clone (copy) repository from remote repository
  git clone 
3. Add new or modified file into staged mode
  git add <file>
  git add . # add all
4. Add file into commited state 
  git commit -m "<your message>"
- Commit file without staging
  git commit -a -m "<your message>"
5. Verify status
  git status
  git status -s #short status
6. Restore:
- To unstage file
  git restore --staged
  git reset HEAD <file>
- To unstage all file
  git reset -- .
- Discard change in the current working directory (Or Reset to previous
  commited state)
  git restore <file>: restore a deleted file
  git checkout -- <file>...
7. Check log:
- Show list of commit
  git log
- Short version:
  git log --oneline
- Show statistics in every commits:
  git log --stat
- Show detail:
  git log -p
- Limit detail log of "n" lastest commit:
  git log -p -<n>
8. Different betwen mode
- Check unstaged files
  git diff
- Compare changes in staging area to last commit:
  git diff --staged
- Different between commit session
  git diff <commit_id_1> <commit_id_2> 
9. To ignore a file from git commit, add it into .gitignore
  .gitignore
- Rules:
  - Blank lines or lines starting with # are ignored.
  - Standard glob patterns work, and will be applied recursively throughout the entire working tree.
  - You can start patterns with a forward slash (/) to avoid recursivity.
  - You can end patterns with a forward slash (/) to specify a directory.
  - You can negate a pattern by starting it with an exclamation point (!).
10. Help
  git help 
  git <command> --help/-h 
  man git
11. Remove file
- Stage removal of a file.
  git rm
- Remove staged file
  git rm --staged/--cached
12. Branch:
- Create branch:
  git branch <name>
- Show all branch: 
  git branch
- Switch to another branch
  git checkout <name>
13. Remote git:
- Add new remote:
  git remote add <shortname> <link>
- Show remote repos:
  git remote -v
- Copy from your remote repo:
  git clone
- Fetching data, but not merge to your data:
  git fetch <remote_repo_shortname>
- Pull: fetch & merge remote branch with your branch
  git pull
- Push to your remote repo:
  git push <branch> <remote_repo_shortname>
- Show remote repo info:
  git remote show <remote_repo_shortname>
- Rename remote repo:
  git remote rename <current_name> <desired name>
- Delete remote repo:
  git remote remove <remote_repo_shortname>
